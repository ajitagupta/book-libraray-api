package com.example.demo.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.model.Book;
import com.example.demo.service.BookService;

@RestController
@RequestMapping("/books")
public class BookController {
	
	@PostMapping
	public String createBook(@RequestBody Book book) {
		bookService.save(book);
		return "book saved";
	}
	
	@Autowired  // this annotation helps in assign the object created during starting of the application
	//1st Type DI
	BookService bookService;

	//public MyController(BookService bookService) {
	//	super();
	//	this.bookService = bookService; // 2nd way by using constructor DI
	//}

	public BookService getBookService() {
		return bookService;
	}

	//3rd type is setter DI
	/*
	 * @Autowired public void setBookService(BookService bookService) {
	 * this.bookService = bookService; }
	 */
	
	
	/*
	 * 
	 * To design a api , take car of usage for path variable and request param
	 * take care of http methods and inside behaviour of it.
	 */
	
	@GetMapping
	public List<Book> getAllBooks(@RequestParam(required = false) Integer year)	{
		if(year == null)
		  return bookService.findAllBooks();
		else 
		  return bookService.getBookByPY(year);	
		//return allbooks;
	}
	
//	@GetMapping("/{year}")	//works with find and get both
//	public List<Book> getBooksByPY(@RequestParam Integer year)	{
//		List<Book> allbooks = bookService.getBookByPY(year);
//		return allbooks;
//	}

	@GetMapping("/{id}")
	public Book getBookById(@PathVariable String id)	{
		return bookService.findBookById(id);
		//return bookById;
	}
	
	@PutMapping("/update")
	public String updateBook(@RequestBody Book book)	{
		String id = book.getId();
		Book dbBook = bookService.findBookById(id);
		dbBook.setAuthor(book.getAuthor());
		dbBook.setPublishYear(book.getPublishYear());
	    bookService.save(dbBook);
		return "Book updated";
		
	}
	
	@DeleteMapping("/delete/{id}")
	public String deleteBook(@PathVariable String id)	{
		
		Book dbBook = bookService.findBookById(id);
		bookService.remove(id);
		
		if (bookService.findBookById(id) != null) {
			bookService.remove(id);
			return "Book deleted";
		}	else	{
			return "Book invalid";
		}			
	}
}
