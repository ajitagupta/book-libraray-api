package com.example.demo.model;

import java.util.List;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.OneToMany;

//The @Entity annotation is used to specify that the class
//should be considered a JPA entity, so it can be stored
//in a JPA repository. Note that we also have an empty
//constructor, which is required by JPA to be able to
//instantiate objects via reflection.
@Entity
public class Library {
	//We’ll use unique identifiers as primary keys, and for
	//that we’ll use the Java Long class. The annotation @Id
	//tells JPA that it’s going to be the primary key identifier,
	//and the @GeneratedValue indicates that it should be
	//autogenerated (we’re not setting it).
	@Id
	String id;
	
	String name;
	String address;
	Integer numBooks;
	
	//In order to specify the relation between entities, JPA
	//provides several annotations: @OneToOne, @OneToMany,
	//@ManyToOne, and @ManyToMany. With some of these
	//annotations you can define also the details for how
	//you want to link them.
	@OneToMany(cascade = CascadeType.ALL)			// unidirectional relationship: one library can have many books
	List<Book> books;

	public String getId() {
		return id;
	}

	public void setId(String id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getAddress() {
		return address;
	}

	public void setAddress(String address) {
		this.address = address;
	}

	public Integer getNumBooks() {
		return numBooks;
	}

	public void setNumBooks(Integer numBooks) {
		this.numBooks = numBooks;
	}

	public List<Book> getBooks() {
		return books;
	}

	public void setBooks(List<Book> books) {
		this.books = books;
	}

	public Library(String id, String name, String address, Integer numBooks, List<Book> books) {
		super();
		this.id = id;
		this.name = name;
		this.address = address;
		this.numBooks = numBooks;
		this.books = books;
	}

	public Library() {
		super();
	}
	
	
	

}
